**Project Structure:**

```
watermark_app/
│
├── main.py               # Application entry point: GUI layout and event loop
├── watermark.py          # Core watermarking logic: text and logo functions using Pillow
├── batch_processor.py    # Batch-processing utilities for applying watermarks to multiple images
├── presets.py            # Saving and loading watermark presets/settings (JSON-based)
├── image_editor.py       # Image manipulation tools: resize, crop, rotate, format conversion
├── ui_utils.py           # User‐interface helpers: color picker, font selection, theme toggles
├── config.py             # Global configuration: default colors, fonts, file paths, constants
├── dark_mode.py          # Dark-mode theme management
├── dragdrop.py           # Drag-and-drop file upload support
├── undo_redo.py          # Undo/redo state management for edits
├── progressbar.py        # Progress-bar component for batch operations
└── assets/               # Static assets: logos, fonts, icons, sample images
    ├── logos/
    ├── fonts/
    └── icons/
```

---

**Module Responsibilities:**

* **main.py**
  Initializes and lays out the main window, defines all UI widgets (buttons, inputs, menus), and dispatches user actions to the appropriate processing modules.

* **watermark.py**
  Implements the core watermarking functions:

  * *add\_text\_watermark* for applying styled text overlays, and
  * *add\_logo\_watermark* for compositing logo images with adjustable opacity and scaling.

* **batch\_processor.py**
  Provides a `batch_process` function to apply text or logo watermarks across a collection of images, with progress‐callback support and error handling.

* **presets.py**
  Manages saving, loading, listing, and deleting named watermark presets (font, size, color, position, opacity) via a local JSON file.

* **image\_editor.py**
  Offers general-purpose image operations: loading, saving (with quality settings), resizing (with aspect-ratio control), cropping, rotating, flipping, grayscale conversion, format conversion, and compression.

* **ui\_utils.py**
  Contains reusable UI utilities such as:

  * Color‐picker dialog (`pick_color`)
  * Font‐family helper (`pick_font`)
  * Theme application (`apply_dark_mode` / `apply_light_mode`)
  * (Optionally) drag-and-drop registration for supported widgets.

* **config.py**
  Defines application-wide constants and default values, for example:

  * Default font path and size
  * Default watermark color and opacity
  * Default positioning options.

* **dark\_mode.py**
  Encapsulates logic to toggle and apply a dark-mode theme across the application’s widgets.

* **dragdrop.py**
  Implements drag-and-drop file upload handling (using TkDND or equivalent) for quicker image import.

* **undo\_redo.py**
  Tracks a history stack of `PIL.Image` states, exposing `undo()` and `redo()` methods to revert or reapply recent edits.

* **progressbar.py**
  Wraps a `ttk.Progressbar` component into a simple class, supporting both determinate (with percentage label) and indeterminate modes for batch tasks.

* **assets/**
  Houses static resources:

  * **logos/**: Predefined watermark logos
  * **fonts/**: Bundled TTF/variable-font files
  * **icons/**: UI icons and branding graphics.

---

**Typical Workflow:**

1. **Launch** the application via `main.py`.
2. **Import** an image (via file dialog or drag-and-drop).
3. **Enter** watermark text or select a logo.
4. **Adjust** options (font, size, color, position, opacity) or load a preset.
5. **Preview** the watermark directly in the GUI (Canvas).
6. **Save** the result if desired (single image or in batch).
7. Undo/Redo recent changes as needed.
8. Process multiple images with `batch_processor` while displaying progress.
9. Toggle light/dark theme for the interface.

This modular design ensures a clean separation of concerns and facilitates future extensions—such as adding advanced image filters or integrating cloud storage.
